from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)
import re

from db import save_appointment #filter

NAME, PHONE, SERVICE, MONTH, DAY, TIME, CONFIRM, CHANGE_FIELD = range(8)

services = ["–ú–∞–Ω—ñ–∫—é—Ä", "–ü–µ–¥–∏–∫—é—Ä", "–°—Ç—Ä–∏–∂–∫–∞", "–ú–∞–∫—ñ—è–∂"]
months = ["–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å", "–õ–∏–ø–µ–Ω—å"]
days = [str(i) for i in range(1, 32)]
times = [f"{h}:00" for h in range(8, 21, 2)]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –±—å—é—Ç—ñ-—Å–∞–ª–æ–Ω—É. –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    if context.user_data.get("changing") == "–Ü–º‚Äô—è":
        return await confirm(update, context)
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É? (10 —Ü–∏—Ñ—Ä)")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if not re.fullmatch(r"\d{10}", phone):
        await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å 10 —Ü–∏—Ñ—Ä:")
        return PHONE
    context.user_data["phone"] = phone
    if context.user_data.get("changing") == "–¢–µ–ª–µ—Ñ–æ–Ω":
        return await confirm(update, context)
    reply_markup = ReplyKeyboardMarkup([[s] for s in services], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SERVICE

async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service"] = update.message.text
    if context.user_data.get("changing") == "–ü–æ—Å–ª—É–≥–∞":
        return await confirm(update, context)
    reply_markup = ReplyKeyboardMarkup([[m] for m in months], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:", reply_markup=reply_markup)
    return MONTH

async def get_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["month"] = update.message.text
    reply_markup = ReplyKeyboardMarkup([days[i:i+5] for i in range(0, len(days), 5)], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:", reply_markup=reply_markup)
    return DAY

async def get_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["day"] = update.message.text
    reply_markup = ReplyKeyboardMarkup([times[i:i+3] for i in range(0, len(times), 3)], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=reply_markup)
    return TIME

async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text
    if context.user_data.get("changing") == "–î–∞—Ç–∞":
        return await confirm(update, context)
    return await confirm(update, context)

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    context.user_data["changing"] = None  # –°–∫–∏–¥–∞–Ω–Ω—è
    summary = (
        f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:\n\n"
        f"üë§ –Ü–º‚Äô—è: {data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üíÖ –ü–æ—Å–ª—É–≥–∞: {data.get('service')}\n"
        f"üìÖ –î–∞—Ç–∞: {data.get('day')} {data.get('month')} –æ {data.get('time')}\n\n"
        "–í—Å–µ –≤—ñ—Ä–Ω–æ?"
    )
    markup = ReplyKeyboardMarkup([["–¢–∞–∫", "–ó–º—ñ–Ω–∏—Ç–∏"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(summary, reply_markup=markup)
    return CONFIRM

async def confirm_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–¢–∞–∫":
        save_appointment(context.user_data)  # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        options = [["–Ü–º‚Äô—è", "–¢–µ–ª–µ—Ñ–æ–Ω"], ["–ü–æ—Å–ª—É–≥–∞", "–î–∞—Ç–∞"]]
        markup = ReplyKeyboardMarkup(options, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–©–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", reply_markup=markup)
        return CHANGE_FIELD


async def change_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field = update.message.text
    context.user_data["changing"] = field

    if field == "–Ü–º‚Äô—è":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º‚Äô—è:", reply_markup=ReplyKeyboardRemove())
        return NAME
    elif field == "–¢–µ–ª–µ—Ñ–æ–Ω":
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=ReplyKeyboardRemove())
        return PHONE
    elif field == "–ü–æ—Å–ª—É–≥–∞":
        reply_markup = ReplyKeyboardMarkup([[s] for s in services], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –ø–æ—Å–ª—É–≥—É:", reply_markup=reply_markup)
        return SERVICE
    elif field == "–î–∞—Ç–∞":
        reply_markup = ReplyKeyboardMarkup([[m] for m in months], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º—ñ—Å—è—Ü—å:", reply_markup=reply_markup)
        return MONTH

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –Ø–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ ‚Äì /start", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("7681600164:AAF4RU_nMm3dAf2EMp5q08f3boNj6WYJ46o").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
            MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_month)],
            DAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_day)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_choice)],
            CHANGE_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_field)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()

if __name__ == "__main__":
    main()
